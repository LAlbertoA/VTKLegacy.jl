var documenterSearchIndex = {"docs":
[{"location":"loading/#Loading-VTK-legacy-files","page":"Loading Files","title":"Loading VTK legacy files","text":"","category":"section"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"The motivation behind VTKLegacy is the ability to extract the contents of a VTK file written in legacy format and load the data to an object deppending of the geometry/topology of the datasets. The data must be written in binary and, currently, only \"STRUCTURED_POINTS\", \"STRUCTURED_GRID\", \"RECTILINEAR_GRID\" and \"UNSTRUCTURED_GRID\" with \"POINT_DATA\" and \"CELL_DATA\" are supported.","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"To load the content of a VTK file, use the function LoadVTK:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> vtk = LoadVTK(\"path/to/file.vtk\");","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"This will load the VTK file in a custom object deppending on the VTK file geometry/topology. When working with files with \"STRUCTURED_POINTS\", the load function will create a StructuredPoints object that contains all the information in the file in it's fields and print to stdout a summary of the data, the vtk.data field will contain all of the datasets in the file. Accesing m.data will return an array with shape (ndata,nx,ny,nz) where ndata = SCALARS+3*VECTORS  (the number of SCALARS datasets plus 3 times the number of VECTORS datasets, one for each component of the vector) and nx, ny and nz the number of points in each axis. Using the example file StructuredPointsExample.vtk we get:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> vtk = LoadVTK(\"/home/luis/.julia/dev/VTKLegacy/VTK_examples/StructuredPointsExample.vtk\");\nTitle: output from Diable\nDimensions: Int32[50, 50, 50]\nSpacing: [0.04, 0.04, 0.04]\nOrigin: [-1.0, -1.0, -1.0]\nName of the data: [\"Density\", \"Pressure\", \"Velocity\"]\nData type: [\"SCALARS\", \"SCALARS\", \"VECTORS\"]\n\njulia> vtk.data.size\n(5, 50, 50, 50)\n\njulia> vtk.dataAttributes\n3-element Vector{String}:\n \"SCALARS\"\n \"SCALARS\"\n \"VECTORS\"\n\njulia> vtk.dimensions\n3-element Vector{Int32}:\n 50\n 50\n 50","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"To retrieve a dataset from m.data you can index like with any array or with the dataset name directly from the StructuredPoints object:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> vtk.data[1,:,:,:] == vtk[\"Density\"]\ntrue","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"And to print the general info showed when loading the file:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> show(vtk)\nTitle: output from Diable\nDimensions: Int32[50, 50, 50]\nSpacing: [0.04, 0.04, 0.04]\nOrigin: [-1.0, -1.0, -1.0]\nName of the data: [\"Density\", \"Pressure\", \"Velocity\"]\nData type: [\"SCALARS\", \"SCALARS\", \"VECTORS\"]","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"If the file(s) topology is \"UNSTRUCTURED_GRID\", the load function will create an UnstructuredGrid object. Since this type of file can contain any type of dataset attribute format without any type of regular structure data will be stored in a field for each dataset attribute format (currently only supporting \"POINT_DATA\" and \"CELL_DATA\"). For example loading the file UnstructuredGridExample.vtk we get:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> vtk = LoadVTK(\"VTK_examples/UnstructuredGridExample.vtk\");\nTitle: Output from Walicxe3D\nNumber of Cells: 36864\nName of cell datasets: [\"rho\", \"velx\", \"vely\", \"velz\", \"P\"]\nCell data types: [\"SCALARS\", \"VECTORS\", \"SCALARS\"]\nNumber of Points: 294912\nName of point datasets: [\"Nothing\"]\nPoint data types: [\"Nothing\"]","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"Since this file only contains \"CELL_DATA\" vtk.pointData will return nothing but vtk.cellData will return the array with the datasets:","category":"page"},{"location":"loading/","page":"Loading Files","title":"Loading Files","text":"julia> vtk.pointData == nothing\ntrue\n\njulia> vtk.cellData\n5×36864 Matrix{AbstractFloat}:\n 98.009      155.998      …      50001.6      50002.7\n   ⋮                     ⋱                       ⋮\n  1.60406f6    1.47006f6  …       9623.2       9651.74","category":"page"},{"location":"reference/#api","page":"API","title":"References","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"CurrentModule = VTKLegacy","category":"page"},{"location":"reference/#Contents","page":"API","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]\nDepth = 2","category":"page"},{"location":"reference/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#API","page":"API","title":"API","text":"","category":"section"},{"location":"reference/","page":"API","title":"API","text":"Modules = [VTKLegacy]","category":"page"},{"location":"reference/#VTKLegacy.RectilinearGrid","page":"API","title":"VTKLegacy.RectilinearGrid","text":"RectilinearGrid\n\nObject that contains all the information and datasets from a Legacy VTK file with a RECTILINEAR_GRID geometry/topology.\n\nFields\n\ntitle::String: Title of the VTK file.\nnx::Int32: Number of points in the x direction.\nny::Int32: Number of points in the y direction.\nnz::Int32: Number of points in the z direction.\ndimensions::Vector{Int64}: Number of points in each dimension: [nx,ny,nz].\nxCoordinates::Vector{Float64}: Domain subdivisions in the \"x\" axis.\nyCoordinates::Vector{Float64}: Domain subdivisions in the \"y\" axis.\nzCoordinates::Vector{Float64}: Domain subdivisions in the \"z\" axis.\ncellData::Array{AbstractFloat,2}: Array containing each dataset in the CELL_DATA section.\ncellDataNames::Vector{String}: Name of each dataset in the CELL_DATA section.\ncellDataAttributes::Vector{String}: Attribute of each dataset in the CELL_DATA section.\ncellDict::Dict{String,IntOrRng}: Dictionary with the cellDataNames as the keys and the indexes of cellData as the values.\npointData::Array{AbstractFloat,2}: Array containing each dataset in the POINT_DATA section.\npointDataNames::Vector{String}: Name of each dataset in the POINT_DATA section.\npointDataAttributes::Vector{String}: Attribute of each dataset in the POINT_DATA section.\npointDict::Dict{String,IntOrRng}: Dictionary with the pointDataNames as the keys and the indexes of pointData as the values.\n\n\n\n\n\n","category":"type"},{"location":"reference/#VTKLegacy.StructuredGrid","page":"API","title":"VTKLegacy.StructuredGrid","text":"StructuredGrid\n\nObject that contains all the information and datasets from a Legacy VTK file with a STRUCTURED_GRID geometry/topology.\n\nFields\n\ntitle::String: Title of the VTK file.\nnx::Int32: Number of points in the x direction.\nny::Int32: Number of points in the y direction.\nnz::Int32: Number of points in the z direction.\ndimensions::Vector{Int64}: Number of points in each dimension: [nx,ny,nz].\nnpoints::Int32: Number of points that define the cells.\npoints::Array{AbstractFloat,2}: Array containing the coordinates of the points in the grid.\ncellData::Array{AbstractFloat,2}: Array containing each dataset in the CELL_DATA section.\ncellDataNames::Vector{String}: Name of each dataset in the CELL_DATA section.\ncellDataAttributes::Vector{String}: Attribute of each dataset in the CELL_DATA section.\ncellDict::Dict{String,IntOrRng}: Dictionary with the cellDataNames as the keys and the indexes of cellData as the values.\npointData::Array{AbstractFloat,2}: Array containing each dataset in the POINT_DATA section.\npointDataNames::Vector{String}: Name of each dataset in the POINT_DATA section.\npointDataAttributes::Vector{String}: Attribute of each dataset in the POINT_DATA section.\npointDict::Dict{String,IntOrRng}: Dictionary with the pointDataNames as the keys and the indexes of pointData as the values.\n\n\n\n\n\n","category":"type"},{"location":"reference/#VTKLegacy.StructuredPoints","page":"API","title":"VTKLegacy.StructuredPoints","text":"StructuredPoints\n\nObject that contains all the information and datasets from a Legacy VTK file with a STRUCTURED_POINTS geometry/topology.\n\nFields\n\ndata::Array{Float64,4}: 4-dimensional array of Float64 that holds the datasets of the vtk file.\ntitle::String: Title of the VTK file.\nnx::Int32: Number of points in the x direction.\nny::Int32: Number of points in the y direction.\nnz::Int32: Number of points in the z direction.\ndx::Float64: Distance between points in the x direction.\ndy::Float64: Distance between points in the y direction.\ndz::Float64: Distance between points in the z direction.\nx0::Float64: Position of origin in the x direction.\ny0::Float64: Position of origin in the y direction.\nz0::Float64: Position of origin in the z direction.\nx::Vector{Float64}: Points positions in the x direction.\ny::Vector{Float64}: Points positions in the y direction.\nz::Vector{Float64}: Points positions in the z direction.\ndimensions::Vector{Int64}: Number of points in each dimension: [nx,ny,nz].\nspacing::Vector{Float64}: Spacing size in each dimension: [dx,dy,dz].\norigin::Vector{Float64}: Origin of the mesh: [x0,y0,z0].\ndataNames::Vector{String}: Names of the datasets in the VTK file.\ndataAttributes::Vector{String}: Attribute of each dataset in the VTK file.\ndictionary::Dict{String,Union{Int64,UnitRange{Int64}}}: Dictionary with the dataNames as the keys and the indexes of data as the values. \n\n\n\n\n\n","category":"type"},{"location":"reference/#VTKLegacy.UnstructuredGrid","page":"API","title":"VTKLegacy.UnstructuredGrid","text":"UnstructuredGrid\n\nObject that contains all the information and datasets from a Legacy VTK file with a UNSTRUCTURED_GRID geometry/topology.\n\nFields\n\ntitle::String: Title of the VTK file.\nnpoints::Int32: Number of points that define the cells.\nncells::Int32: Number of cells in the file.\npoints::Array{AbstractFloat,2}: Array containing the coordinates of the points in the grid.\ncells::Vector{Int32}: Number and indexes of points defining each cell.\ncellTypes::Vector{Int32}: Type of each cell. Integer value between 1 and 16 \ncellData::Array{AbstractFloat,2}: Array containing each dataset in the CELL_DATA section.\ncellDataNames::Vector{String}: Name of each dataset in the CELL_DATA section.\ncellDataAttributes::Vector{String}: Attribute of each dataset in the CELL_DATA section.\ncellDict::Dict{String,IntOrRng}: Dictionary with the cellDataNames as the keys and the indexes of cellData as the values.\npointData::Array{AbstractFloat,2}: Array containing each dataset in the POINT_DATA section.\npointDataNames::Vector{String}: Name of each dataset in the POINT_DATA section.\npointDataAttributes::Vector{String}: Attribute of each dataset in the POINT_DATA section.\npointDict::Dict{String,IntOrRng}: Dictionary with the pointDataNames as the keys and the indexes of pointData as the values.\n\n\n\n\n\n","category":"type"},{"location":"reference/#VTKLegacy.VTKDataSet","page":"API","title":"VTKLegacy.VTKDataSet","text":"VTKDataSet\n\nAbstract supertype for all vtk geometry/topology objects (e.g. StructuredPoints)\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.getindex-Tuple{StructuredPoints, String}","page":"API","title":"Base.getindex","text":"getindex(m::StructuredPoints, name::String)\n\nRetrieve the array stored in the m.data field with name name. The name should be an element of m.dataNames.  The syntax m[\"dataname\"] is converted by the compiler to getindex(m,\"dataname\").\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{VTKDataSet}","page":"API","title":"Base.show","text":"show(m::Union{StructuredPoints,UnstructuredGrid})\n\nPrint general information of the VTK file contained in the object m\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.LoadVTK-Tuple{String}","page":"API","title":"VTKLegacy.LoadVTK","text":"LoadVTK(filename::String)\n\nRead the VTK file filename in to an object of type StructuredPoints or UnstructuredGrid. Currently only StructuredPoints and UnstructuredGrid are supported.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.WriteVTK-Tuple{String, VTKDataSet}","page":"API","title":"VTKLegacy.WriteVTK","text":"WriteVTK(filename::Stirng, m::VTKDataSet)\n\nWrite a VTK file with with name filename with the contents of m. The file will have  geometry/topology according with typeof(m).\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.integrate","page":"API","title":"VTKLegacy.integrate","text":"integrate(m::StructuredPoints,var::Union{Int64,String,Vector{Union{Int64,String}}}=1)\n\nCompute the discrete integral of var in the whole mesh m as: \n\nI = sum_(ijk)=(111)^N_xN_yN_ztextvar_(ijk)Delta xDelta yDelta z\n\nIf var is unspecified, integrate only the dataset with index 1 in m.data\n\n\n\n\n\n","category":"function"},{"location":"reference/#VTKLegacy.magnitude-Tuple{Array{Float64, 3}}","page":"API","title":"VTKLegacy.magnitude","text":"magnitude(arr::Array{AbstractFloat,3})\n\nReturns the magnitude of a vector dataset of size (axis,nx,ny) where axis is 3 (\"x\", \"y\" and \"z\" dimensions) and nx and ny are the number of cells in each axis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.magnitude-Tuple{Array{Float64, 4}}","page":"API","title":"VTKLegacy.magnitude","text":"magnitude(arr::Array{AbstractFloat,4})\n\nReturns the magnitude of a vector dataset of size (axis,nx,ny,nz) where axis is 3 (\"x\", \"y\" and \"z\" dimensions) and nx, ny and nz are the number of cells in each axis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.magnitude-Tuple{StructuredPoints, String}","page":"API","title":"VTKLegacy.magnitude","text":"magnitude(m::StructuredPoints,dataname::String)\n\nReturns the magnitude of a dataset in m with name dataname and attribute Vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#VTKLegacy.ranges","page":"API","title":"VTKLegacy.ranges","text":"ranges(m::StructuredPoints,io::Union{IOStream,Nothing}=nothing)\n\nObtain the maximum and minimum values of each dataset in m and print them to io followed by a newline.\n\nIf io is unspecified, prints the values to the default output stream stdout.\n\n\n\n\n\n","category":"function"},{"location":"#VTKLegacy.jl-Documentation","page":"Home","title":"VTKLegacy.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VTKLegacy is a Julia package that allows you to read in data from VTK files writen in Legacy format. To read data from VTK XML files ReadVTK.jl is the way to go.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: VTKLegacy is under development and originally designed to read VTK files produced by Walicxe3D, Guacho and Tlaloque. Currently only supporting reading data stored as cells and points in binary format, but community contributions to improve this package are welcome!","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, install and load package as any other:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"VTKLegacy\")\nusing VTKLegacy","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then load a VTK file by using the LoadVTK function","category":"page"},{"location":"","page":"Home","title":"Home","text":"vtk = LoadVTK(\"path/to/file.vtk\");","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a StructuredPoints or UnstructuredGrid object that contains all the information and datasets of the file. Also it will print general information of the file to the default output stream:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> vtk = LoadVTK(\"VTK_examples/StructuredPointsExample.vtk\");\nTitle: output from Diable\nDimensions: Int32[50, 50, 50]\nSpacing: [0.04, 0.04, 0.04]\nOrigin: [-1.0, -1.0, -1.0]\nName of the data: [\"Density\", \"Pressure\", \"Velocity\"]\nData type: [\"SCALARS\", \"SCALARS\", \"VECTORS\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"To acces the data from a vtk file with STRUCTURED_POINTS, you can index the data field of the StructuredPoints object with the index number or the data name of the dataset you want:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> vtk.data[1,:,:,:]\n50×50×50 Array{AbstractFloat, 3}:\n[:, :, 1] =\n 0.147356  0.158636  …  0.158553  0.147354\n ⋮                  ⋱                  ⋮\n 0.147354  0.158548  …  0.158462  0.147353\n;;; …\n[:, :, 50] =\n 0.147354  0.158548  …  0.158462  0.147353\n ⋮                  ⋱                  ⋮\n 0.147353  0.158452  …  0.158379  0.147362\n\n julia> vtk[\"Density\"]\n50×50×50 Array{AbstractFloat, 3}:\n[:, :, 1] =\n 0.147356  0.158636  …  0.158553  0.147354\n ⋮                  ⋱                  ⋮\n 0.147354  0.158548  …  0.158462  0.147353\n;;; …\n[:, :, 50] =\n 0.147354  0.158548  …  0.158462  0.147353\n ⋮                  ⋱                  ⋮\n 0.147353  0.158452  …  0.158379  0.147362","category":"page"},{"location":"","page":"Home","title":"Home","text":"The number of points in each direction, distance between points and origin of the grid can be obtained through the fields vtk.dimensions, vtk.spacing and vtk.origin:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> vtk.dimensions\n3-element Vector{Int32}:\n 50\n 50\n 50\n\njulia> vtk.spacing\n3-element Vector{Float64}:\n 0.04\n 0.04\n 0.04\n\njulia> vtk.origin\n3-element Vector{Float64}:\n -1.0\n -1.0\n -1.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"The same information shown when loading the file can be shown again using the show function by passing the StructuredPoints or UnstructuredGrid object:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> show(vtk)\nTitle: output from Diable\nDimensions: Int32[50, 50, 50]\nSpacing: [0.04, 0.04, 0.04]\nOrigin: [-1.0, -1.0, -1.0]\nName of the data: [\"Density\", \"Pressure\", \"Velocity\"]\nData type: [\"SCALARS\", \"SCALARS\", \"VECTORS\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details about loading vtk files with different geometry/topology see Loading VTK legacy files","category":"page"},{"location":"writing/#Writing-functions","page":"Writing Files","title":"Writing functions","text":"","category":"section"},{"location":"writing/","page":"Writing Files","title":"Writing Files","text":"The main function to write files in VTK legacy files is:","category":"page"},{"location":"writing/","page":"Writing Files","title":"Writing Files","text":"WriteVTK","category":"page"},{"location":"writing/#VTKLegacy.WriteVTK","page":"Writing Files","title":"VTKLegacy.WriteVTK","text":"WriteVTK(filename::Stirng, m::VTKDataSet)\n\nWrite a VTK file with with name filename with the contents of m. The file will have  geometry/topology according with typeof(m).\n\n\n\n\n\n","category":"function"}]
}
